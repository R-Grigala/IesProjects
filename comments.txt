
# for sqlite
flask init_db
flask populate_db

swagger.py -ს აქვს პრობლემა სურათის ატვირთვის დროს 
venv/lib/python3.10/site-packages/flask_restx/swagger.py -ში
469 -ე ახზზე :  if any(p["type"] == "file" for p in all_params):  უნდა ჩანაცვლდეს:
if any(p["type"] == "file" or (p["type"] == "array" and p["items"]["type"]=="file") for p in all_params):


#1 First Start on the Docker

docker-compose up

#2 For Build flask_app on the Docker

docker-compose build

#2 Second Start flask_app on the Docker

docker-compose up -d

mkdir -p /home/iesflask/IesProjects/database
sudo chmod -R 775 /home/iesflask/IesProjects/database/
sudo chown -R $USER:$USER /home/iesflask/IesProjects/database/


docker exec -it mysql /bin/sh
docker exec -it mysql mysql -u root -p

# Flask Migrations
docker exec -it iesprojects_flask /bin/sh 
# Reset Migrations:
flask db init
flask db migrate -m "Initial migration"
flask db upgrade

# Re-run Migration Commands:
flask db migrate
flask db upgrade

docker-compose up --build nginx



1. ცვლილებების შესრულება (თუ საჭირო)
პირველ რიგში, დარწმუნდით, რომ Dockerfile-სა და docker-compose.yml ფაილებში ყველა ცვლილება უკვე შესრულებულია.

2. წაშალეთ არსებული კონტეინერები
ამის შემდეგ, აუცილებელია არსებული კონტეინერების გაჩერება და წაშლა, რათა ახალი ვერსიით დაიწყონ მუშაობა.

docker-compose down
3. კონტეინერების ხელახლა აშენება
გააშენეთ კონტეინერები, რაც აუცილებელია ბოლო ცვლილებების ასატვირთად (მაგალითად, თუ Flask აპლიკაციის ან Nginx კონფიგურაცია შეცვალეთ).

docker-compose build
4. კონტეინერების გაშვება
გააშვებთ კონტეინერებს ახალი კონფიგურაციით.

docker-compose up -d
5. კონტეინერების სტატუსის შემოწმება
დარწმუნდით, რომ ყველა კონტეინერი მუშაობს სწორად:

docker-compose ps

ეს მეთოდი merge პროცესს იყენებს, რაც იმას ნიშნავს, რომ შენს ცვლილებებს არ გადააწერს და არ გადააკეთებს მათი ისტორიის თანმიმდევრობას. 
rebase-ის გარეშე უფრო მარტივად შეგიძლია შენარჩუნო არსებული კომიტების ისტორია
git pull --no-rebase origin master


# For Github
git add .
git commit -m "Your commit message"
git push origin master


# For Docker container

Flask სერვისის მასშტაბირება ორი კონტეინერისთვის

# Load Balancing
ნაბიჯები პირველი Flask კონტეინერის განახლებისთვის:
გაჩერეთ პირველი Flask კონტეინერი (მაგალითად, iesprojects-flask-1):

docker stop iesprojects-flask-1

გავაკეთოთ rebuild და გაუშვით პირველი Flask კონტეინერი:

docker-compose up --build -d flask
ამ ბრძანებით პირველი კონტეინერი გააკეთებს rebuild და გაუშვებს ხელახლა, ხოლო მეორე Flask კონტეინერი (მაგალითად, iesprojects-flask-2) კვლავ იმუშავებს.

მეორე Flask კონტეინერის განახლება:
ახლა გააჩერეთ მეორე Flask კონტეინერი (მაგალითად, iesprojects-flask-2):

docker stop iesprojects-flask-2
გავაკეთოთ კონტეინერის rebuild და გაუშვით მეორე Flask კონტეინერი:

docker-compose up --build -d flask